import paho.mqtt.client as mqttimport randomimport timeimport json# Configuration MQTTbroker = "localhost"  # Utilise "localhost" pour un broker localport = 1883  # Port MQTTtopic_temperature = "capteur/temperature"topic_humidite = "capteur/humidite"topic_debit_urinaire = "capteur/debit_urinaire"topic_poul = "capteur/poul"topic_creatine = "capteur/creatine"# UID des ESP32 (à imaginer)esp32_uuids = {    "esp32_1": "1234567890abcdef",    "esp32_2": "abcdef1234567890",    "esp32_3": "0abcdef123456789"}# Fonction pour générer des données aléatoiresdef generate_data(sensor_type):    if sensor_type == "temperature":        return round(random.uniform(20.0, 30.0), 2)  # Température entre 20 et 30°C    elif sensor_type == "humidite":        return round(random.uniform(30.0, 60.0), 2)  # Humidité entre 30 et 60%    elif sensor_type == "debit_urinaire":        return random.randint(1, 10)  # Débit entre 1 et 10 L/h    elif sensor_type == "poul":        return random.randint(60, 100)  # Pouls entre 60 et 100 bpm    elif sensor_type == "creatine":        return round(random.uniform(0.5, 1.5), 2)  # Créatine entre 0.5 et 1.5 mg/dL# Connexion à MQTTdef on_connect(client, userdata, flags, rc):    print("Connecté avec le code " + str(rc))# Création du client MQTTclient = mqtt.Client()client.on_connect = on_connectclient.connect(broker, port, 60)# Boucle d'envoi des donnéesdef send_data():    while True:        for esp32_id, uid in esp32_uuids.items():            # Envoi des données pour chaque type de capteur            temperature = generate_data("temperature")            humidite = generate_data("humidite")            debit_urinaire = generate_data("debit_urinaire")            poul = generate_data("poul")            creatine = generate_data("creatine")                        # Créer le message JSON avec l'UID et la donnée            temperature_msg = json.dumps({"uid": uid, "value": temperature})            humidite_msg = json.dumps({"uid": uid, "value": humidite})            debit_urinaire_msg = json.dumps({"uid": uid, "value": debit_urinaire})            poul_msg = json.dumps({"uid": uid, "value": poul})            creatine_msg = json.dumps({"uid": uid, "value": creatine})                        # Publication des messages sur les canaux correspondants            client.publish(topic_temperature, temperature_msg)            client.publish(topic_humidite, humidite_msg)            client.publish(topic_debit_urinaire, debit_urinaire_msg)            client.publish(topic_poul, poul_msg)            client.publish(topic_creatine, creatine_msg)            time.sleep(2)  # Délai de 2 secondes entre chaque envoi# Lancer l'envoi des donnéessend_data()pip install paho-mqttPour voir si ca marche dans le terminalLa tu ecoute sur le topic mosquitto_sub -h localhost -t capteur/temperature